package org.example.structure.sort.insert;

import org.example.structure.sort.common.GenerateRandomValues;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import static org.example.structure.sort.common.GenerateRandomValues.generateTwo;
import static org.example.structure.sort.exchange.BubbleSortDemo.print;

/**
 * @author <a href="https://www.songfang.top"> ZhSMM </a>
 * @date 2020/05/03
 * @description 插入排序
 **/
public class InsertSortDemo {
    public static void insertSortDemo(List<Integer> list) {
        // 定义一个待插入的的数
        int insertValue = 0;
        // 定义一个待插入的位置
        int insertIndex = 0;
        for (int i = 1; i < list.size(); i++) {
            insertIndex = i - 1;
            insertValue = list.get(i);
            // 说明：
            // 1. insertIndex >= 0 保证在给insertVal找插入位置时，不越界
            // 2. insertVal < list.get(insertIndex) 待插入的数，还未找到插入位置
            // 3. 就需要将list.get(insertIndex)后移
            while (insertIndex >= 0 && insertValue < list.get(insertIndex)) {
                list.set(insertIndex + 1, list.get(insertIndex));
                insertIndex--;
            }
            list.set(insertIndex + 1, insertValue);
        }
    }

    public static void main(String[] args) {
        List<Integer> list = generateTwo();
        System.out.println("生成的数据:");
        print(list);

        System.out.println("插入排序测试：");
        insertSortDemo(list);
        print(list);

        List<Integer> list1= GenerateRandomValues.generate();
        long start = System.currentTimeMillis();
        insertSortDemo(list1);
        long end1=System.currentTimeMillis();
        System.out.println("插入排序 = " + (end1 - start));

        //第一次测试：
        //生成的数据:
        //-1379292160	342251328	2016064832	-1696905152	636530048	-227969408	-43867584	1933084608	328362816	836775168	526393792	-51352192	639753920	1614471680	-290057152	-1517176832	-538480768	-611472512	-1601813056	-1814500736	-534416832	-1374832192	-1522670272	-1388665024	740570624
        //插入排序测试：
        //-1814500736	-1696905152	-1601813056	-1522670272	-1517176832	-1388665024	-1379292160	-1374832192	-611472512	-538480768	-534416832	-290057152	-227969408	-51352192	-43867584	328362816	342251328	526393792	636530048	639753920	740570624	836775168	1614471680	1933084608	2016064832
        //插入排序 = 4966

        //第二次测试：
        //生成的数据:
        //1487450240	-380098176	1694824256	-1803712	-1395780416	-1480328896	1453617792	-529941440	-401610368	-831930112	-1061587008	513832832	2007961600	-170244480	1950805632	880636608	541790912	-2054476352	-1906020992	1277417728	-1697485696	1383099264	-1879364032	1912413568	-874136448
        //插入排序测试：
        //-2054476352	-1906020992	-1879364032	-1697485696	-1480328896	-1395780416	-1061587008	-874136448	-831930112	-529941440	-401610368	-380098176	-170244480	-1803712	513832832	541790912	880636608	1277417728	1383099264	1453617792	1487450240	1694824256	1912413568	1950805632	2007961600
        //插入排序 = 4546

        //第三次测试：
        //生成的数据:
        //1555175616	-1766735424	2127837696	1605888064	1192196352	-363075712	-1587146368	1967271488	-2003356544	386616640	-82848704	-1196477760	598421888	562894528	-353922240	1113649216	-1418735296	1672274240	-2045090240	-1675217792	-755296000	-1370685632	-1974924160	-1284460672	2076962688
        //插入排序测试：
        //-2045090240	-2003356544	-1974924160	-1766735424	-1675217792	-1587146368	-1418735296	-1370685632	-1284460672	-1196477760	-755296000	-363075712	-353922240	-82848704	386616640	562894528	598421888	1113649216	1192196352	1555175616	1605888064	1672274240	1967271488	2076962688	2127837696
        //插入排序 = 4616

        //加入if判断，对是否需要移位进行判断，反而用时上升
        //            if (insertIndex+1 != i){
        //                list.set(insertIndex + 1, insertValue);
        //            }
        //生成的数据:
        //-1297186240	-759279168	-1747518336	-8941760	1744119168	-588529344	915833856	-122717440	-13956992	-2021831424	1772095744	965899008	-1215102848	1428902656	753390592	978546816	585434752	1048226688	-2095435392	1223268224	-198218176	1260485568	1924701248	-497004736	831935936
        //插入排序测试：
        //-2095435392	-2021831424	-1747518336	-1297186240	-1215102848	-759279168	-588529344	-497004736	-198218176	-122717440	-13956992	-8941760	585434752	753390592	831935936	915833856	965899008	978546816	1048226688	1223268224	1260485568	1428902656	1744119168	1772095744	1924701248
        //插入排序 = 5482
    }
}
